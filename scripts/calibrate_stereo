#!/usr/bin/python3

"""
This script is used to calibrate the stereo camera.
TODO:
1. load camera-related parameters from yaml file
2. use Optical flow to apture the images
3. run the chessboard detection and visualize the results
4. check the results and save the feature points
5. run the calibration
"""

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import numpy as np
import cv2
import message_filters
from det_data_handler.data_handler import DataHandler

class StereoCalibrator(DataHandler):
    def __init__(self, 
                 image_0_topic,
                 image_1_topic,
                 chessboard_size,
                 chessboard_square_size,
                 num_images = 30):
        super(StereoCalibrator, self).__init__(image_0_topic)
        self.image_0_topic = image_0_topic
        self.image_1_topic = image_1_topic
        self.bridge = CvBridge()
        self.chessboard_size = chessboard_size
        self.chessboard_square_size = chessboard_square_size
        self.num_images = num_images
        self.prev_image_1 = None
        self.image_0_points_pub = rospy.Publisher("cam_0/chessboard_points",
                                                   Image,
                                                   queue_size=1)  
        self.image_1_points_pub = rospy.Publisher("cam_1/chessboard_points",
                                                   Image,
                                                   queue_size=1)
        self.image_0_sub = message_filters.Subscriber(image_0_topic, Image)
        self.image_1_sub = message_filters.Subscriber(image_1_topic, Image)
        self.ts = message_filters.ApproximateTimeSynchronizer([self.image_0_sub, self.image_1_sub], 10, 0.1)
        self.ts.registerCallback(self.filter_callback)
        self.image_0_points = []
        self.image_1_points = []
    
    def filter_callback(self, image_0, image_1):
        image_0 = self.bridge.imgmsg_to_cv2(image_0, "bgr8")
        image_1 = self.bridge.imgmsg_to_cv2(image_1, "bgr8")
        if self.prev_image_1 is None:
            self.prev_image_1 = image_1
            return
        # compute optical flow
        mag_1, _, _ = self.compute_optical_flow(self.prev_image_1, image_1)
        mag_1_avg = np.round(np.average(mag_1), 2)
        if mag_1_avg > 0.5:
            color = (0, 0, 255)
        else:
            color = (0, 255, 0)
        cv2.putText(image_0, "Optical Flow: " + str(mag_1_avg), (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 2, 
        color, 4)
        cv2.putText(image_1, "Optical Flow: " + str(mag_1_avg), (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 2,
        color, 4)
        self.prev_image_1 = image_1
        
        # run chessboard detection
        ret_0, corners_0 = cv2.findChessboardCorners(image_0, self.chessboard_size)
        ret_1, corners_1 = cv2.findChessboardCorners(image_1, self.chessboard_size)
        if ret_0 and ret_1:
            self.image_0_points.append(corners_0)
            self.image_1_points.append(corners_1)
            image_0 = cv2.drawChessboardCorners(image_0, self.chessboard_size, corners_0, ret_0)
            image_1 = cv2.drawChessboardCorners(image_1, self.chessboard_size, corners_1, ret_1)
        # publish the images
        self.image_0_points_pub.publish(self.bridge.cv2_to_imgmsg(image_0, "bgr8"))
        self.image_1_points_pub.publish(self.bridge.cv2_to_imgmsg(image_1, "bgr8"))
            

if __name__ == "__main__":
    rospy.init_node("calibrate_stereo")
    image_0_topic = "/cam_0/color/image_raw"
    image_1_topic = "/cam_1/color/image_raw"
    chessboard_size = (12, 6)
    chessboard_square_size = 0.050
    num_images = 30
    calibrator = StereoCalibrator(image_0_topic,
                                  image_1_topic,
                                  chessboard_size,
                                  chessboard_square_size,
                                  num_images)
    rospy.spin()


